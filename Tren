Maneja la lista de trenes y las  personas que a su vez maneja lista de Maletas, asi como los datos de peso y personas en el tren actualmente
#include<iostream>
#include<string>
#include<vector> 
#include<fstream>
#include <stdlib.h>
#include <stdio.h> 
#include <string.h>
using namespace std; 
#include "Boleteria.cpp" 
class nodoT {   public:  
nodoT(int mat, string nom, int yer, string model, string conduct,int cp,int cpp,int cpb,nodoT *sig = NULL)    {  estadoactual=false;      bodega=*new listaM();      pasajeros=*new listaP();       matricula = mat;       nombre=nom;       year=yer;       modelo=model;       conductor=conduct;       Capacidadp=cp;       CapacidadMaximap=cpp;       CapacidadBodega=cpb;       CapacidadTotal=cpp+cpb;           ActualBodega=0;       ActualPersonas=0;       ActualTotal=ActualBodega+ActualPersonas;       PersonasABordo=0;          siguiente = sig;    }    void setdestino(nodoD *p){destino=p;}    nodoD getdestino(){return *destino;}    void setlistatren(listaP p){ pasajeros=p;}    void setlistabodega(listaM p){ bodega=p;}  /* void agregarpersonas(nodoP p4)   { nodoP p2=p4;      pasajeros.Insertar(p2.getid(),p2.getdestino(),p2.getmaleta(),p2.getnom(),p2.getasiento(),p2.getapellido(),p2.gettel(),p2.getnacion alidad(),p2.getciudad(),p2.getpeso(),p2.getestatura());  nodoM *aux;  aux=NULL;  int a=0;  aux=p2.getmaleta().getprimero();  while(a<p2.getmaleta().getmaletas()+1){  bodega.Insertar(aux->getidentificacionM(),aux->getpeso(),aux->getubicacion());  *aux=aux->getsiguiente(); a++; }  }*/    double getActualBodega(){setActualBodega();return ActualBodega;}
    double getActualPersonas(){setActualPersonas();return ActualPersonas;}    double getActualTotal(){setActualTotal();return ActualTotal;}    int getPersonas(){setPersonas();return PersonasABordo;}   private:      bool estadoactual;    void setActualBodega(){ActualBodega=bodega.getpesobodega();}    void setActualPersonas(){ActualPersonas=bodega.getpesonormal();}    void setActualTotal(){ActualTotal=bodega.getpesototal()+pasajeros.getpesototal();}    void setPersonas(){PersonasABordo=pasajeros.getpersonasabordo();}    nodoD *destino;    int matricula;    listaM bodega;    listaP pasajeros;    string nombre;    int year;    string modelo;    string conductor;    int Capacidadp;    double CapacidadMaximap;    double CapacidadBodega;    double CapacidadTotal;    double ActualBodega;    int PersonasABordo;    double ActualPersonas;    double ActualTotal;    //viaje    nodoT *siguiente;           friend class listaT; }; 
typedef nodoT *pnodoT; 

class listaT {   public:
listaT() { primero = actual = NULL; }    ~listaT();        void Insertar(int mat, string nom, int yer, string model, string conduct,int cp,int cpp,int cpb);    void Borrar(int v);    bool ListaVacia() { return primero == NULL; }     void Mostrar();    void Siguiente() { if(actual) actual = actual->siguiente; }    void Primero() { actual = primero; }    void Ultimo() { Primero(); if(!ListaVacia()) while(actual->siguiente) Siguiente(); }    bool Actual() { return actual != NULL; }    int ValorActual() { return actual->matricula; }        pnodoT getprimero(){return primero;}   private:    pnodoT primero;    pnodoT actual; }; 
listaT::~listaT() {   pnodoT aux;      while(primero) {      aux = primero;
      primero = primero->siguiente;      delete aux;   }   actual = NULL; }
      
void listaT::Insertar(int mat, string nom, int yer, string model, string conduct,int cp,int cpp,int cpb) {   pnodoT anterior; 
   // Si la lista está vacía   if(ListaVacia() ) {      // Asignamos a lista un nuevo nodo de valor asiento y      // cuyo siguiente elemento es la lista actual                          primero = new nodoT(mat, nom, yer, model, conduct, cp, cpp,cpb, primero);   } else {      anterior = primero;      primero=new nodoT(mat, nom, yer, model, conduct, cp, cpp,cpb, anterior);     } }
void listaT::Borrar(int v) {   pnodoT anterior, nodoT;      nodoT = primero;   anterior = NULL;   while(nodoT && nodoT->matricula < v) {      anterior = nodoT;       nodoT = nodoT->siguiente;   }   if(!nodoT || nodoT->matricula != v) return;   else { // Borrar el nodo       if(!anterior) // Primer elemento          primero = nodoT->siguiente;      else  // un elemento cualquiera         anterior->siguiente = nodoT->siguiente;      delete nodoT;   }   }
void listaT::Mostrar() {   nodoT *aux;    aux = primero;   while(aux) {      cout << aux->matricula <<", "<< aux->nombre<<", "<< aux->year<<", "<< aux->modelo<<", "<< aux->conductor<<", "<< aux>Capacidadp<<", "<< aux->CapacidadMaximap<<", "<< aux->CapacidadBodega<<", "<< aux->CapacidadTotal   << "-> "<<endl;      cout <<"Bodega :"<< endl;      aux->bodega.Mostrar();      cout<<"Pasajeros :"<<endl;      aux->pasajeros.Mostrar();      aux = aux->siguiente;   }   cout << endl; }
Destino 

Clase que maneja la ubicación destino del tren o pasajero y destino #include<iostream> #include<string> #include<vector> #include<fstream> #include <stdlib.h> #include <stdio.h> #include <string.h> using namespace std; class nodoD {   public:    nodoD(string nom, int dur)    {   nodoD *sig = NULL;       nombre =  nom;       duracion = dur;       siguiente = sig;       salida=0;       actual=0;       llegada=duracion-actual;    }    nodoD()    {       nombre =  "";       duracion = 0;       siguiente = NULL;       salida=0;       actual=0;       llegada=0;    }  void setactual(){actual++;}  int getllegada(){return duracion-actual;}  int getduracion(){return duracion;}  void Mostrar(nodoD *aux);   private:    string nombre;    int duracion;    int salida;    int actual;    int llegada;    nodoD *siguiente;           friend class listaD; }; 
typedef nodoD *pnodoD; 

class listaD {   public:    listaD() { primero = actual = NULL; }    ~listaD();        void Mostrar();    string ValorActual() { return actual->nombre; }   private:    pnodoD primero;    pnodoD actual;
}; listaD::~listaD() {   pnodoD aux;      while(primero) {      aux = primero;      primero = primero->siguiente;      delete aux;   }   actual = NULL; } /* void listaD::Insertar(string nom, int dur) {   pnodoD anterior;   // Si la lista está vacía   if(ListaVacia() || primero->duracion > dur) {      // Asignamos a lista un nuevo nodo de valor asiento y      // cuyo siguiente elemento es la lista actual                          primero = new nodoD(nom,dur,primero);   } else {      anterior = primero;      primero=new nodoD(nom,dur, anterior);     } }
void listaD::Borrar(int v) {   pnodoD anterior, nodoD;      nodoD = primero;   anterior = NULL;   while(nodoD && nodoD->duracion < v) {      anterior = nodoD;       nodoD= nodoD->siguiente;   }   if(!nodoD || nodoD->duracion != v) return;   else { // Borrar el nodo       if(!anterior) // Primer elemento          primero = nodoD->siguiente;      else  // un elemento cualquiera         anterior->siguiente = nodoD->siguiente;      delete nodoD;   }  } */ void nodoD::Mostrar(nodoD *aux) {      cout << aux->nombre <<", "<< aux->duracion<< endl;      aux = aux->siguiente;   cout << endl; } void listaD::Mostrar() {   nodoD *aux;      aux = primero;   while(aux) {      cout << aux->nombre <<", "<< aux->duracion<< endl;      aux = aux->siguiente;   }   cout << endl; }
